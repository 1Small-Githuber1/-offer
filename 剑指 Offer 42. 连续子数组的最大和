一、问题描述：剑指 Offer 42. 连续子数组的最大和

输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
要求时间复杂度为O(n)。

示例1:
输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为6。

提示：
1 <= arr.length <= 10^5
-100 <= arr[i] <= 100

注意：本题与主站 53 题相同：https://leetcode-cn.com/problems/maximum-subarray/


二、思路分析
动态规划解析：
	状态定义：设动态规划列表 dp， dp[i] 代表以元素nums[i] 为结尾的连续子数组最大和。
    为何定义最大和dp[i]中必须包含元素nums[i]：保证dp[i]递推到dp[i+1]的正确性；如果不包含nums[i]，递推时则不满足题目的 连续子数组 要求。
	转移方程：若dp[i−1]  0 ，说明]dp[i−1] 对dp[i]产生负贡献，即 dp[i−1]+nums[i] 还不如 nums[i]本身大。
    当dp[i−1]>0 时：执行dp[i]=dp[i−1]+nums[i] ；
    当dp[i−1] 0 时：执行 dp[i] = nums[i]；
	初始状态：dp[0] = nums[0]，即以nums[0]结尾的连续子数组最大和为nums[0] 。
	返回值：返回dp列表中的最大值，代表全局最大值。

复杂度解析：
	空间复杂度降低：
    由于dp[i]只与dp[i−1] 和]nums[i] 有关系，因此可以将原数组nums用作dp列表，即直接在nums上修改即可。由于省去dp列表使用的额外空间，因此空间复杂度从O(N) 降至O(1)。

	复杂度分析：
    时间复杂度O(N)：线性遍历数组 nums即可获得结果，使用O(N)时间。
    空间复杂度O(1)：使用常数大小的额外空间。


三、代码
class Solution {
    public int maxSubArray(int[] nums) {
        //方法一：动态规划：
        //状态转移方程：dp[i] = max(dp[i-1] + nums[i], nums[i])，其中dp[i]表示以索引i为结束点基准的子数组的最大值。
        //初始状态：dp[0]= nums[0]

        // -2,1,-3,4,-1,2,1,-5,4
        //初始直接将-2放入状态集中 : =>dp[0] = -2
        //对于1    之前的-2的状态是-2<0 ：     所以不包括-2     =>dp[1] = 1
        //对于-3   之前1的状态是1>0 ：         所以包括1        =>dp[2] = -3 + 1 = -2
        //对于4    之前的-3的状态是-2<0：      所以不包含-2     =>dp[3] = 4
        //对于-1   之前的4的状态是4>0:         所以包含-1       =>dp[4] = 4 + (-1) = 3
        //对于2    之前的-1的状态时3>0：       所以包含2        =>dp[5] = 3 + 3 = 5
        //以此类推....

        //得到结果
        // -2,1,-2,4,3,5,6,-1,4 //当前状态所能构成的最大值状态的数组
        
        /*
        int len = nums.length;
        if(len == 1) return nums[0];

        int[] dp = new int[len];
        dp[0] = nums[0];
        int maxNum = nums[0];
        for(int i = 1;i < len;i++) {
            if(dp[i - 1] < 0) {
                dp[i] = nums[i];
                maxNum = Math.max(dp[i],maxNum);
            } else {
                dp[i] = nums[i] + dp[i-1];
                maxNum = Math.max(dp[i],maxNum);
            }
        }
        return maxNum;
        */


        //方法二：动态规划改进版
        /*动态规划解析：
        状态定义： 设动态规划列表 dp ，dp[i]代表以元素nums[i] 为结尾的连续子数组最大和。

        为何定义最大和 dp[i]中必须包含元素nums[i] ：保证dp[i] 递推到dp[i+1] 的正确性；如果不包含 nums[i]n，递推时则不满足题目的 连续子数组要求。
        转移方程： 若dp[i−1]≤0 ，说明dp[i−1] 对 dp[i]产生负贡献，即dp[i-1] + nums[i]还不如 nums[i]本身大。

        当dp[i−1]>0 时：执行 dp[i] = dp[i-1] + nums[i]；
        当dp[i−1]≤0 时：执行 dp[i] = nums[i] ；
        初始状态：dp[0]=nums[0]，即以nums[0] 结尾的连续子数组最大和为nums[0]

        返回值： 返回 dp 列表中的最大值，代表全局最大值。
        */

        int len = nums.length;
        int[] dp = new int[len];
        int maxNum = nums[0];
        dp[0] = nums[0];

        for(int i = 1;i<len;++i) {
            dp[i] = Math.max(dp[i-1]+nums[i],nums[i]);
            maxNum = Math.max(dp[i],maxNum);
        }
        return maxNum;
    }
}


