一、问题描述：剑指 Offer 54. 二叉搜索树的第k大节点

给定一棵二叉搜索树，请找出其中第k大的节点。

示例 1:
输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 4

示例 2:
输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 4

限制：1 ≤ k ≤ 二叉搜索树元素个数


二、思路分析
四种方法：
（1）递归中序
    二叉树的三种遍历方式： a. 前序遍历 b. 中序遍历 c. 后续遍历
    深入研究二叉树搜索树的特性，并且深刻知道二叉搜索树的一个特性：通过中序遍历所得到的序列，就是有序的。

（2）递归中序逆序
    方法一中获取第K大的数时，因为第一大的数在列表尾部，所以是list.get(list.size()-k)来顺序获取第K大的数，这里巧妙地换了一下，直接反过来中序逆序，直接求K大的数，很方便

（3）中序遇K停止遍历
    这是对方法一的优化方案，避免直接O(n)的时间复杂度
    
（4）中序迭代
    有递归，迭代肯定跑不掉，在某些时间，递归时间过长，迭代反而比递归好


三、代码
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //方法一和二
    //List<Integer> list = new ArrayList<>();

    private int res = 0,count=0;

    public int kthLargest(TreeNode root, int k) {
        //方法一：递归中序遍历  时间复杂度O(n)
        //执行用时：1 ms, 在所有 Java 提交中击败了44.55%的用户
        //内存消耗：40.4 MB, 在所有 Java 提交中击败了8.81%的用户
        /*
        if(root == null) return 0;
        infixOrder(root);
        return list.get(list.size()-k);
        */
        

        //方法二：中序逆序
        //执行用时：2 ms, 在所有 Java 提交中击败了10.91%的用户
        //内存消耗：40.3 MB, 在所有 Java 提交中击败了11.51%的用户
        /*
        if(root == null) return 0;
        infixOrder(root);
        return list.get(k - 1);
        */


        //方法三：中序递归优化方案，到K时停止遍历
        if(root == null) return 0;
        stopK(root,k);
        return res;
        


        //方法四：中序迭代
        //（右中左）中序遍历，返回第k个数
        //执行用时：1 ms, 在所有 Java 提交中击败了44.55%的用户
        //内存消耗：39.6 MB, 在所有 Java 提交中击败了57.60%的用户
        /*
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = root;
        while(cur != null || !stack.isEmpty()) {
            while(cur != null) {
                stack.push(cur);
                cur = cur.right;
            }
            cur = stack.pop();
            if(--k == 0) return cur.val;
            cur = cur.left;
        }
        return -1;
        */

    }

    /*
    //方法一
    public void infixOrder(TreeNode root) {
        if(root.left != null) infixOrder(root.left);
        list.add(root.val);
        if(root.right != null) infixOrder(root.right);
    } 
    */


    //方法二
    /*
    public void infixOrder(TreeNode root) {
        if(root.right != null) infixOrder(root.right);
        list.add(root.val);
        if(root.left != null) infixOrder(root.left);
    }
    */


    //方法三
    private void stopK(TreeNode root,int k) {
        if(root.right != null) stopK(root.right,k);

        if(++count == k) {
            res = root.val;
            return;
        }
        
        if(root.left != null) stopK(root.left,k);
    }

}
