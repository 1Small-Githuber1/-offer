一、问题描述：剑指 Offer 47. 礼物的最大价值

在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。
你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

示例 1:
输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物
 
提示：
0 < grid.length <= 200
0 < grid[0].length <= 200


二、思路分析
    五种方法，其实也就是三种方法，另外两种只是优化而已，方法一还是不满足的，超出时间限制，可见代码中描述
总结：(1)方法一：递归方法行不通，时间超出
     (2)方法二：动态规划方法，用一维数组接受计算结果，并取一维数组最后一个元素为结果值；
     (3)方法三和四：动态规划方法，用二维数组接受结果，但是为了减低空间复杂度，从O(M*N)到O(1),直接在原数组上改变元素
     (4)方法五：动态规划方法，用二维数组接受结果，但是二维数组是新建的，并不是在原来基础数组上的改变，但是是从第二行第二列三进行搜索的
目前比较，方法四效率最高，时间最低，空间消耗最低


三、代码

class Solution {
    public int maxValue(int[][] grid) {
        //方法一：贼心不死，直接递归
        //return recur(grid,0,0);

        //方法二：动态规划,果然很快
        //采用的是一维数组，相当于空间复杂度开辟了一个一维数组，为O(N)
        /*
        int m = grid.length,n = grid[0].length;   //长和宽
        int[] dp = new int[n+1];
        for(int i = 1;i<=m;i++) {
            for(int j = 1;j<=n;j++) {
                dp[j] = Math.max(dp[j],dp[j-1]) + grid[i-1][j-1];
            }
        }
        */


        //方法三：动态规划，采用二维数组存储结果
        //空间复杂度 O(1) ： 原地修改使用常数大小的额外空间
        /*
        int m = grid.length,n = grid[0].length;   //长和宽
        for(int i = 0;i < m;i++) {
            for(int j = 0;j < n;j++) {
                if(i == 0 && j == 0) continue;
                if(i == 0) {
                    grid[i][j] += grid[i][j-1];
                } else if(j == 0) {
                    grid[i][j] += grid[i-1][j];
                } else {
                    grid[i][j] += Math.max(grid[i-1][j],grid[i][j-1]);
                }
            }
        }
        return grid[m-1][n-1];
        */



        //方法四：上面的方法三还可以优化，从哪里优化呐？
        //因为实际上，如果二维数组很大，往往第一行第一列的元素和占全部元素个数很少
        //即当 gridgrid 矩阵很大时，i=0 或 j=0 的情况仅占极少数，相当循环每轮都冗余了一次判断。因此，可先初始化矩阵第一行和第一列，再开始遍历递推。
        //目前效率最高：
        //执行用时：2 ms, 在所有 Java 提交中击败了98.76%的用户
        //内存消耗：42.3 MB, 在所有 Java 提交中击败了77.58%的用户
        /*
        int m = grid.length, n = grid[0].length;
        for(int j = 1; j < n; j++) // 初始化第一行
            grid[0][j] += grid[0][j - 1];
        for(int i = 1; i < m; i++) // 初始化第一列
            grid[i][0] += grid[i - 1][0];
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++) 
                grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]);
        return grid[m - 1][n - 1];
        */


        //方法五：个人感觉上述还能优化：就是直接多扩展一行一列，类似于方法二,
        //只不过是新建的二维数组，空间消耗大一点
        int m = grid.length, n = grid[0].length;
        //dp[i][j]表示从grid[0][0]到grid[i - 1][j - 1]时的最大价值
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid[i - 1][j - 1];
            }
        }
        return dp[m][n];  //为什么取[m][n],因为前面已经扩展了一行和一列，达到了[m+1][n+1]
    }


    //方法一：超时，果不其然
    /*
    private static int recur(int[][] grid,int row,int col) {
        if(row >= grid.length || col >= grid[0].length) return 0;
        return Math.max(recur(grid,row+1,col),recur(grid,row,col+1)) + grid[row][col];
    }
    */

}
