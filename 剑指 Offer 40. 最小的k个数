一、问题描述：剑指 Offer 40. 最小的k个数

输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。

示例 1：
输入：arr = [3,2,1], k = 2
输出：[1,2] 或者 [2,1]

示例 2：
输入：arr = [0,1,2,1], k = 1
输出：[0]
 
限制：
0 <= k <= arr.length <= 10000
0 <= arr[i] <= 10000


二、思路分析
    这种TopN问题，做了几道题发现，发现用快排和堆排序是最常用的算法，也就是必须掌握的，另外，还有优先队列、计数排序等方法，下面一一讲述：
（1）计数排序
    这个方法，其实直接是可以调用sort()的，直接排好序再选择前K个最小的，也是最最最容易想到的

（2）优先队列模拟大顶堆
    PriorityQueue这种天然的默认小顶堆的模拟方式是极其好的，为什么这样说呐，因为PriorityQueue里面有添加方法【add()、offer()】和删除方法【poll()和remove()】，方便调整堆；
另外PriorityQueue默认是一个小顶堆，然而可以通过传入自定义的Comparator函数来实现大顶堆

（3）使用队列模拟最小堆排序

（4）快排





三、代码
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        //方法一：计数排序
        //执行用时：8 ms, 在所有 Java 提交中击败了61.81%的用户
        //内存消耗：41.5 MB, 在所有 Java 提交中击败了5.13%的用户
        /*
        if(k <= 0 || arr.length < k) {
            return new int[0];
        }
        
        Arrays.sort(arr);  //排序
        int[] res = new int[k];
        for(int i = 0;i < k;i++){
            res[i] = arr[i];
        }
        return res;
        */

        /* 这是通过统计每个字符出现次数来计算前K小的元素
        // 统计每个数字出现的次数
        int[] count = new int[10001];   //因为题目中说了arr.length<=10000
        for(int ele : arr) {
            count[ele]++;
        }
        // 根据count数组从头找出k个数作为返回结果
        int[] res = new int[k];
        int idx = 0;
        for(int ele = 0;ele < count.length;ele++) {
            while(count[ele] --> 0 && idx < k) {
                res[idx++] = ele;
            }
            if(idx == k) {
                break;
            }
        }
        return res;
        */

        //方法二：使用队列模拟最小堆排序
        //执行用时：12 ms, 在所有 Java 提交中击败了43.91%的用户
        //内存消耗：40.7 MB, 在所有 Java 提交中击败了95.40%的用户
        /*  
        if(k <= 0 || arr.length < k) {
            return new int[0];
        }
        Arrays.sort(arr);
        
        //Queue<Integer> queue = new PriorityQueue<>();   优先队列效率低一点
        Deque<Integer> queue = new LinkedList<>();
        int[] res = new int[k];
        for(int i = 0;i < arr.length;i++) {
            queue.offer(arr[i]);      //人堆
        }
        for(int j = 0;j < k;j++) {
            res[j] = queue.poll();    //出堆
        }
        return res;
        */


        //方法三：堆排序：大顶堆
        // 保持堆的大小为K，然后遍历数组中的数字，遍历的时候做如下判断：
        // 1. 若目前堆的大小小于K，将当前数字放入堆中。
        // 2. 否则判断当前数字与大根堆堆顶元素的大小关系，如果当前数字比大根堆堆顶还大，这个数就直接跳过；
        // 反之如果当前数字比大根堆堆顶小，先poll掉堆顶，再将该数字放入堆中。

        //执行用时：15 ms, 在所有 Java 提交中击败了39.98%的用户
        //内存消耗：41 MB, 在所有 Java 提交中击败了64.76%的用户
        
        if(k <= 0 || arr.length < k) {
            return new int[0];
        }
        // 实现大根堆需要元素和堆顶元素的大小。
        // PriorityQueue默认是一个小顶堆，然而可以通过传入自定义的Comparator函数来实现大顶堆
        Queue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {                
                return o2-o1;   //相反的减，得到大顶堆
            }
        });
        for(int num: arr) {
            if(queue.size() < k) {
                queue.offer(num);
            } else if(num < queue.peek()) {   //比较大小 peek()方法是得到栈顶元素的方法
                queue.poll();
                queue.offer(num);
            }
        }

        //返回堆中元素
        int[] res = new int[k];
        int idIndex = 0;
        for(int num : queue) {
            res[idIndex++] = num;
        }
        return res;
        


        //方法四：快排

    }
}
