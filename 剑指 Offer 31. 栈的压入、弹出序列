一、问题描述：剑指 Offer 31. 栈的压入、弹出序列

输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。
假设压入栈的所有数字均不相等。
例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。

示例 1：
输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出：true
解释：我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

示例 2：
输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
输出：false
解释：1 不能在 2 之前弹出。
 
提示：
    1、0 <= pushed.length == popped.length <= 1000
    2、0 <= pushed[i], popped[i] < 1000
    3、pushed 是 popped 的排列。
    
    
    
二、思路分析
（1）方法一：用栈模拟
    思路很简单，我们尝试按照 popped 中的顺序模拟一下出栈操作，如果符合则返回 true，否则返回 false。
这里用到的贪心法则是如果栈顶元素等于 popped 序列中下一个要 pop 的值，则应立刻将该值 pop 出来。
    我们使用一个栈 st 来模拟该操作。将 pushed 数组中的每个数依次入栈，同时判断这个数是不是 popped 数组中下一个要 pop 的值，如果是就把它 pop 出来。最后检查栈是否为空。

算法流程
    1、初始化栈 stack，j = 0；
    2、遍历 pushed 中的元素 x；
        当 j < popped.size() 且栈顶元素等于 popped[j]：
            弹出栈顶元素；
            j += 1；
    3、如果栈为空，返回 True，否则返回 False。
 
 
（2）方法二：直接利用已经遍历过的数组元素位置
    这里利用已经遍历过的数组pushed前面的i元素位置，直接复制，这样省去了用一个栈的空间


三、代码
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        //比如 pushed = [1,2,3,4,5], popped = [4,5,3,2,1]

        //方法一：用栈模拟 ，时间复杂度和空间复杂度都为O(N)
        /*
        1、初始化栈 stack，j = 0；
        2、遍历 pushed 中的元素 x；
            当 j < popped.size() 且栈顶元素等于 popped[j]：
                弹出栈顶元素；
                j += 1；
        3、如果栈为空，返回 True，否则返回 False。
        */
        /*
        int p2 = popped.length;
        Deque<Integer> stack = new LinkedList<>();
        int i = 0;
        for(int item: pushed) {
            stack.push(item);    // 1先进栈 然后 2 3 遇到4时发现相等
            while(i < p2 && !stack.isEmpty() && stack.peek() == popped[i]) {
                stack.pop();
                i++;
            }
        }
        return i == p2;
        */


        //方法二：不用栈，空间复杂度为O(1)，时间复杂度为O(N)
        //本方法的亮点在于 没有引用另外一个张或者数组，直接将已经遍历过的元素位置重新利用
        int i=0,j=0;
        for(int element : pushed) {
            pushed[i] = element;
            while(i >= 0 && pushed[i] == popped[j]) {
                j++;
                i--;
            }
            i++;
        }
        return i == 0;
    }
}
