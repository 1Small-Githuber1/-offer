一、问题描述：剑指 Offer 56 - I. 数组中数字出现的次数

一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。

示例 1：
输入：nums = [4,1,4,6]
输出：[1,6] 或 [6,1]

示例 2：
输入：nums = [1,2,10,4,1,4,3,3]
输出：[2,10] 或 [10,2]
 
限制：2 <= nums.length <= 10000
 

二、思路分析
必须要了解的知识
    我们先来看下异或的性质（数学里异或的符号是⊕）：

交换律：p⊕q=q⊕p
结合律：p⊕(q⊕r)=(p⊕q)⊕r
恒等率：p⊕0=p
归零率：p⊕p=0
    那么，如果有若干个数字进行异或操作：a1⊕a2⊕...⊕an

我们可以根据 交换律、 结合律 将相同的数字优先两两进行异或运算。此时根据归零率 ，每两个相同的数字都变成了 00，再根据恒等率 ，把式子里所有的 0去了，此时就只剩下只出现一次的那个数了！


所以异或就是解决方案了！！！
    先对所有数字进行一次异或，得到两个出现一次的数字的异或值。
    在异或结果中找到任意为 11 的位。
    根据这一位对所有的数字进行分组。
    在每个组内进行异或操作，得到两个数字。


三、代码
class Solution {
    public int[] singleNumbers(int[] nums) {
        if(nums == null || nums.length == 0) {
            return new int[0];
        }

       
        //res用来计算nums的异或和
        int res = 0;

        // 计算异或和 并存到res
        // e.g. [2,4,2,3,3,6] 异或和：(2^2)^(3^3)^(4^6)=2=010
        for(int num : nums) res ^= num;

        //设置mask为1，则二进制为0001
        // mask是一个二进制数，且其中只有一位是1，其他位全是0，比如000010，
        // 表示我们用倒数第二位作为分组标准，倒数第二位是0的数字分到一组，倒数第二位是1的分到另一组
        int mask = 1;

        // & operator只有1&1时等于1 其余等于0
        // 用上面的e.g. 4和6的二进制是不同的 我们从右到左找到第一个不同的位就可以分组 4=0100 6=0110
        // 根据e.g. 010 & 001 = 000 = 0则 mask=010
        // 010 & 010 != 0 所以mask=010
        // 之后就可以用mask来将数组里的两个数分区分开
        while((res & mask)==0){
            mask <<= 1;
        }

        //两个只出现一次的数字
        int a=0, b=0;

        for(int num : nums){
            //根据&是否为0区分将两个数字分区，并分别求异或和
            if((num & mask)==0) a ^= num;
            else{
                b ^= num;
            }
        }
        return new int[]{a,b};




        //HashMap超出空复O(1),但是能执行
        /*
        int[] arr = new int[2];
        Map<Integer,Integer> hm = new HashMap<>();

        for(int num : nums){
            if(hm.containsKey(num)) {
                hm.put(num,hm.get(num) + 1);
            } else {
                hm.put(num,1);
            }
            if(hm.get(num) == 1) {
                for(int i = 0;i<=1;i++) {
                    arr[i] = num;
                }
            }
        }
        */

    }
}
