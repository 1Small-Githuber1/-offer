一、问题描述：剑指 Offer 29. 顺时针打印矩阵

输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

示例 1：
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]

示例 2：
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 
限制：
0 <= matrix.length <= 100
0 <= matrix[i].length <= 100


二、思路分析
    我的思路其实在想的时候，就是一个循环输出，想起来简单，写出来确实废了老劲了，脑子不够用呀！
就是分为四个方向，刚开始在二维数组的左上角，只能开始向右和向下运动，最重要是的做好边界问题，下面是摘自Leetcode的 作者：jyd 的思路解析，和他一样，不过这位仁兄写的仔细点，思路和我完全一样！
    
算法流程：
1、空值处理： 当 matrix 为空时，直接返回空列表 [] 即可。
2、初始化： 矩阵 左、右、上、下 四个边界 l , r , t , b ，用于打印的结果列表 res 。
3、循环打印： “从左向右、从上向下、从右向左、从下向上” 四个方向循环，每个方向打印中做以下三件事 （各方向的具体信息见下表） ；
    根据边界打印，即将元素按顺序添加至列表 res 尾部；
    边界向内收缩 11 （代表已被打印）；
    判断是否打印完毕（边界是否相遇），若打印完毕则跳出。
4、返回值： 返回 res 即可。
    打印方向	1. 根据边界打印	  2. 边界向内收缩	  3. 是否打印完毕
      从左向右	左边界l ，右边界 r	上边界 t 加 1	   是否 t > b
      从上向下	上边界 t ，下边界b	右边界 r 减 1	   是否 l > r
      从右向左	右边界 r ，左边界l	下边界 b 减 1	   是否 t > b
      从下向上	下边界 b ，上边界t	左边界 l 加 1	   是否 l > r

5、复杂度分析：
时间复杂度 O(MN) ： M,N 分别为矩阵行数和列数。
空间复杂度 O(1) ： 四个边界 l , r , t , b 使用常数大小的额外空间（res为必须使用的空间）。


三、代码
class Solution {
    public int[] spiralOrder(int[][] matrix) {
        //分别计算四个方向
        //计算二维数组的长度
        int rows = matrix.length;  //获取一维数组的个数
        if(rows == 0) {
            return new int[0];
        }

        //计算二维数组的宽度
        int colFirst = matrix[0].length;
        //设置输出结果数组和开始索引位置
        int[] res = new int[rows * colFirst];
        int index = 0;

        //给出四个方向开变化的 初始条件
        int left = 0,right = colFirst - 1,bottom =rows - 1,top = 0;

        while(true) {
            //第一个方向：从左向右走
            for(int i = left;i<=right;i++) {
                res[index++] = matrix[top][i];
            }
            if(++top > bottom) {     //判断矩阵结束的条件：顶部超过了底部
                break;
            }

            //第二个方向：从上向下走
            for(int i = top;i<=bottom;i++) {
                res[index++] = matrix[i][right];
            }
            if(--right < left) {    //判断矩阵结束的条件：左边超过了右边
                break;
            }

            //第三个方向：从右向左走
            for(int i = right;i>=left;i--) {
                res[index++] = matrix[bottom][i];
            }
            if(--bottom < top) {    //判断矩阵结束的条件：顶部超过了底部
                break;
            }

            //第四个方向：从下向上走
            for(int i = bottom;i>=top;i--) {
                res[index++] = matrix[i][left];
            }
            if(++left > right) {    //判断矩阵结束的条件：左边超过了右边
                break;
            }
        }
        return res;
    }
}
