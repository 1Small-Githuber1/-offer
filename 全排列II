一、问题描述:全排列II（LeetCode第47题）
给定一个可包含重复数字的序列，返回所有不重复的全排列。

示例:
输入: [1,1,2]
输出:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


二、思路分析
这一题是在「力扣」第46题：“全排列” 的基础上增加了“序列中的元素不可重复”这一条件，但要求返回的结果又不能有重复元素。

思路：在一定会产生重复结果集的地方剪枝。

一个比较容易想到的办法是在结果集中去重。但是问题又来了，这些结果集的元素是一个又一个列表，对列表去重不像用哈希表对基本元素去重那样容易。
如果要比较两个列表是否一样，一个很显然的办法是分别排序，然后逐个比对。既然要排序，我们可以在搜索之前就对候选数组排序，一旦发现这一支搜索下去可能搜索到重复的元素就停止搜索，这样结果集中不会包含重复元素。
 
	产生重复结点的地方，正是图中标注了“剪刀”，且被绿色框框住的地方。
为了方便理解，大家可以把第2个1加上'，即[1, 1', 2]去想象这个搜索的过程。只要遇到起点一样，就有可能产生重复。这里还有一个很细节的地方：
	在图中 ② 处，搜索的数也和上一次一样，但是上一次的1还在使用中；
	在图中 ① 处，搜索的数也和上一次一样，但是上一次的1刚刚被撤销，正是因为刚被撤销，下面的搜索中还会使用到，因此会产生重复，剪掉的就应该是这样的分支。

代码实现方面：在第46题的基础上，要加上这样一段代码：
if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
    continue;
}
这段代码就能检测到标注为①的两个结点，跳过它们。

复杂度分析：（理由同第46题，重复元素越多，剪枝越多。但是计算复杂度的时候需要考虑最差情况。）
	时间复杂度：O(N×N!)，这里N为数组的长度。
	空间复杂度：O(N×N!)。


三、代码
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        //方法一：
        /*
        //前提是排序
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] used = new boolean[nums.length];

        dfs(nums, list, res, used);
        return res;   
        */     

        //方法二：利用46题的方法
        //1、排序（升序或者降序都可以），排序是剪枝的前提
        Arrays.sort(nums);
        //2、结果
        List<List<Integer>> res = new ArrayList<>();
        //3、中间路径
        Deque<Integer> path = new ArrayDeque<>();
        //4、特值判断
        int numLen = nums.length;
        if(numLen == 0) {
            return new ArrayList(0);
        }
        //5、用一个boolean数组判断该数字是否已经访问过了
        boolean[] used = new boolean[numLen];

        //6、回溯
        dfs(nums, 0, path, res, numLen, used);
        return res;
    }

    private void dfs(int[] nums, int depth,
                    Deque<Integer> path, List<List<Integer>> res,
                    int numLen, boolean[] used) {
        if(depth == numLen) {
            res.add(new ArrayList<>(path));
            return;
        }

        for(int i = 0;i<numLen;i++) {
            if(used[i]) continue;

            // 剪枝条件：i > 0 是为了保证 nums[i - 1] 有意义
            // 写 !used[i - 1] 是因为 nums[i - 1] 在深度优先遍历的过程中刚刚被撤销选择
            if(i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false) {
                continue;
            }

            path.addLast(nums[i]);
            used[i] = true;

            dfs(nums, depth+1, path, res, numLen, used);
            path.removeLast();
            used[i] = false;
        }
    }


    /* 方法一
    private void dfs(int[] nums, List<Integer> list,
                    List<List<Integer>> res, boolean[] used){
        if(list.size() == nums.length) {
            res.add(new ArrayList(list));
            return;
        }

        int temp = Integer.MAX_VALUE;
        for(int i = 0;i<nums.length;i++) {
            if(used[i] == false) {
                // 针对重复数字漂亮的剪枝，前提是需要排序
                if(nums[i] != temp) {
                    temp = nums[i];
                    list.add(nums[i]);
                    used[i] = true;

                    //回溯
                    dfs(nums, list, res, used);

                    list.remove(list.size() - 1);
                    used[i] = false;
                }
            }
        }   
    }
    */
}
