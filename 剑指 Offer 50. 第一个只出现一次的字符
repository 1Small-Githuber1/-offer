一、问题描述：剑指 Offer 50. 第一个只出现一次的字符

在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。

示例:
s = "abaccdeff"
返回 "b"

s = "" 
返回 " "
 
限制：0 <= s 的长度 <= 50000


二、思路分析
（1）方法一：对于一般统计出现字符的次数，考虑HashMap是毋庸置疑的，键值对的形式让数据存储更方便

（2）方法二：计数字典查找，其实就是各个字符减去'a'得到int数，看是不是唯一的

（3）方法三：有序哈希表：在哈希表的基础上，有序哈希表中的键值对是按照插入顺序排序的。基于此，可通过遍历有序哈希表，实现搜索首个 “数量为 1 的字符”。
算法流程：
1、初始化： HashMap（Java），记为 dic ；
2、字符统计： 遍历字符串 s 中的每个字符 c ；
    2.1、若 dic 中 不包含键(key) c ：则向 dic 中添加键值对 (c, True) ，代表字符 c 的数量为 1；
    2.2、若 dic 中 包含键(key) c ：则修改键 c 的键值对为 (c, False) ，代表字符 c 的数量 >1 。
3、查找数量为 1的字符： 遍历字符串 s 中的每个字符 c ；
    若 dic中键 c 对应的值为 True ：，则返回 c 。
4、返回 ' ' ，代表字符串无数量为 1 的字符。


三、代码
class Solution {
    public char firstUniqChar(String s) {
        //方法一：HashMap 效率太低
        /*
        if(s == null || s.length() == 0) return ' ';
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i = 0;i < s.length();i++) {
            char ch = s.charAt(i);
            if(map.containsKey(ch)) {
                map.put(ch,map.get(ch)+1);
            } else {
                map.put(ch,1);
            }
        }
        for(int i = 0;i < s.length();i++) {
            if(map.get(s.charAt(i)) == 1) {
                return s.charAt(i);
            }
        }
        return ' ';
        */


        //方法二：字典查找,其实就是各个字符减去'a'得到int数，看是不是唯一的
        /*
        if(s == null || s.length() == 0) return ' ';
        //创建‘a'-'z'的字典
        int[] target = new int[26];
        //第一次遍历，将字符统计到字典数组
        for(int i = 0;i< s.length();i++) {
            target[s.charAt(i) - 'a']++;
        }
        //第二次遍历，从字典数组获取次数
        for(int i = 0;i< s.length();i++) {
            if(target[s.charAt(i) - 'a'] == 1) {
                return s.charAt(i);
            }
        }
        return ' ';
        */


        //方法三：有序哈希表
        //执行用时：26 ms, 在所有 Java 提交中击败了67.61%的用户
        //内存消耗：40.3 MB, 在所有 Java 提交中击败了51.99%的用户

        //在哈希表的基础上，有序哈希表中的键值对是按照插入顺序排序的。基于此，可通过遍历有序哈希表，实现搜索首个 “数量为 1 的字符”。
        //哈希表是去重的，即哈希表中键值对数量 <= 字符串s的长度。
        Map<Character,Boolean> dic = new LinkedHashMap<>();
        char[] ch = s.toCharArray();
        for(char c : ch) {
            dic.put(c,!dic.containsKey(c));
        }
        for(Map.Entry<Character,Boolean> d : dic.entrySet()) {
            if(d.getValue()) return d.getKey();
        }
        return ' ';

    }
}
