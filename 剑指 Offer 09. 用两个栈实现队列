一、问题描述：剑指 Offer 09. 用两个栈实现队列

用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )

示例 1：
输入：
["CQueue","appendTail","deleteHead","deleteHead"]
[[],[3],[],[]]
输出：[null,null,3,-1]

示例 2：
输入：
["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
[[],[],[5],[2],[],[]]
输出：[null,-1,null,null,5,2]

提示：
1 <= values <= 10000
最多会对 appendTail、deleteHead 进行 10000 次调用


二、思路分析
    说真的，我花了10分钟重新读题，连题目意思都不懂是啥，瞬间觉得自己嗝屁了，这还是个简单题，我都不懂搞毛呀！
    然后，我去翻了题解，发现很多人和我一样，甚者，还有一个哥们两个小时都没看懂题意，我还好吧，哈哈哈...
    下面进入正题
其实出题人的意思就是两个栈实现队列的先进先出FIFO，只不过是用了两个隐晦的数组表示一一对应关系而已，

比如示例1：
    ["CQueue","appendTail","deleteHead","deleteHead"] 这里是要执行的方法，从左到右执行
    [[],[3],[],[]]对应上面的方法，是上面方法的参数。CQueue和deleteHead方法不需要指定数字，只有添加才需要指定数字

1.创建队列，返回值为null

2.将3压入栈，返回值为null

3.将栈底的元素删除，也就是消息队列中先进来的元素，所以是deleteHead，返回该元素的数值，所以为3

4.继续删除栈底的元素，但是没有元素了，所以返回-1

所以就有了下面的输出 输出：[null,null,3,-1]


示例 2： 输入： ["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]

               [[],[],[5],[2],[],[]]

1.创建队列，返回值为null

2.删除栈底的元素，但是没有元素，所以返回-1

3.把5压入栈，返回null

4.把2压入栈，返回null

5.删除栈底的一个元素，也就是消息队列中先进来的元素，所以是deleteHead，就是最先进来的5，返回值为5，

6.删除栈底的一个元素，就是后进来的2，返回值为2，

所以就有了下面的输出

输出：[null,-1,null,null,5,2]

有没有发现先进来的数字，首先显示出来了，但是题目中说要使用栈，栈是先进后出的，使用栈来实现先进先出，在这里使用两个栈就好了，从一个进来再到另一个栈，这样顺序就是先进先出了。其实使用一个栈也可以实现先进先出，只不过需要更多地指针和执行消耗。题目的主旨写在第一句，就是，使用两个栈实现一个队列。

    所以代码区的三个函数CQueue、appendTail、deleteHead分别实现创建队列、队尾添加、队头删除的功能，分别实现就好了！下面介绍方法

（1）方法一：直接用Stack
    这样是最容易想到的，但是存在缺陷：使用Stack的方式来做这道题，会造成速度较慢； 原因的话是Stack继承了Vector接口，而Vector底层是一个Object[]数组，那么就要考虑空间扩容和移位的问题了。 
1、可以使用LinkedList来做Stack的容器，因为LinkedList实现了Deque接口，所以Stack能做的事LinkedList都能做，其本身结构是个双向链表，扩容消耗少。 
2、但是我的意思不是像100%代码那样直接使用一个LinkedList当做队列，那确实是快，但是不符题意。

（2）方法二：用LinkedList，实现Deque接口更快，见下面代码



三、代码
class CQueue {
    //方法一：直接用Stack
    /*
    Stack<Integer> s1;
    Stack<Integer> s2;
    public CQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    public void appendTail(int value) {
        while(!s2.isEmpty()) {
            s1.push(s2.pop());
        }
        s1.push(value);
    }
    
    public int deleteHead() {
        while(!s1.isEmpty()) {
            s2.push(s1.pop());
        }
        if(s2.isEmpty()) {
            return -1;
        }
        return s2.pop();
    }
    */



    //方法二：用LinkedList
    Deque<Integer> s1;
    Deque<Integer> s2;
    public CQueue() {
         s1 = new LinkedList<>();
         s2 = new LinkedList<>();
    }
    
    public void appendTail(int value) {
        s1.push(value);
    }
    
    public int deleteHead() {
        // 如果第二个栈为空
        if(s2.isEmpty()) {
            while(!s1.isEmpty()) {
                s2.push(s1.pop());
            } 
        } 
        if(s2.isEmpty()) {
            return -1;
        } else {
            int num = s2.pop();
            return num;
        }
    }
}

/**
 * Your CQueue object will be instantiated and called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */

