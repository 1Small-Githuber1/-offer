一、问题描述：剑指 Offer 67. 把字符串转换成整数

写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

    当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

    该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:
输入: "42"
输出: 42

示例 2:
输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
     
示例 3:
输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。

示例 4:
输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
     
示例 5:
输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
 

二、思路分析
根据题意，有以下四种字符需要考虑：
    首部空格： 删除之即可；
    符号位： 三种情况，即 ''++'' , ''-−'' , ''无符号" ；新建一个变量保存符号位，返回前判断正负即可。
    非数字字符： 遇到首个非数字的字符时，应立即返回。
    数字字符：
        字符转数字： “此数字的 ASCII 码” 与 “ 00 的 ASCII 码” 相减即可；
        数字拼接： 若从左向右遍历数字，设当前位字符为 cc ，当前位数字为 xx ，数字结果为 resres ，则数字拼接公式为：
              res=10×res+x
              x=ascii(c)−ascii(′0 ′)
    是否越界



三、代码
class Solution {
    public int strToInt(String str) {
        /*
        //方法一：依次判断各个条件即可
        //先去空格再判空
        str = str.trim();
        if(str.length() == 0) {
            return 0;
        }
        //转换为字符数组
        char[] ch = str.toCharArray();

        //判断是不是负数
        boolean isMinus = false;

        //首位是不是正负号或者数字
        if(ch[0] != '+' || ch[0] != '-' || !Character.isDigit(ch[0])) {
            //是不是正负号
            if(ch[0] == '+' || ch[0] == '-') {
                //是不是负号
                if(ch[0] == '-') {
                    isMinus = true;
                }
                //否则删除首位
                ch = Arrays.copyOfRange(ch,1,ch.length);
            }
            //首位搞定了就看后面是不是数字了，直到不是数字的地方或者倒底结束
            int index = 0;
            //结果可能超int范围，拿个long接一下
            //'-abc'这种情况返回的也是0，舒服，一箭双雕
            long res = 0;
            while(index < ch.length && Character.isDigit(ch[index])) {
                res *= 10;
                res += ch[index] - '0';
                //及时止损，一看到res超int范围立马return
                if(res > Integer.MAX_VALUE) {
                    //正负号看是正数负数，返回最大值
                    return isMinus ? Integer.MIN_VALUE : Integer.MAX_VALUE;
                }
                //往后走一位
                index++;
            }
            //long需要转化为int
            return isMinus ? -(int)res : (int)res;
        }
        return 0;
        */


        //方法二
        //这个方法有个精彩的地方在于bndry = Integer.MAX_VALUE / 10，用于判断是否越界
        //1、去除非空
        str = str.stim();
        //2、将字符串转为字符数组
        char[] c = str.toCharArray();
        //3、判断是否为零
        if(c.length == 0) return 0;
        //4、记录最终结果res
        int res = 0;
        //5、用于判断是否越界
        int bndry = Integer.MAX_VALUE / 10;
        //6、记录索引
        int i = 1; 
        //7、记录正负数 初始为正   
        int sign = 1;   
        //8、如果是负数，标记为-1
        if(c[0] == '-') sign = -1;
        else if(c[0] != '+') i = 0;
        //9、从第2位开始判断
        for(int j = i; j < c.length; j++) {
            //10、是否满足情况
            if(c[j] < '0' || c[j] > '9') break;
            if(res > bndry || res == bndry && c[j] > '7') return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            //11、整理结果
            res = res * 10 + (c[j] - '0');
        }
        //12、返回
        return sign * res;
    }
}
